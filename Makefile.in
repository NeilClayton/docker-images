# Copyright 2015-present Ganbaro Digital Ltd
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#
#   * Neither the names of the copyright holders nor the names of his
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# shared makefile for building containers on Linux
# tested on Ubuntu 16.04
SHELL=/bin/bash
BRANCH_NAME := $(shell git describe --tags --exact-match 2>/dev/null || git symbolic-ref -q --short HEAD || echo $(BRANCH_NAME))
BUILD_LABEL := $(shell echo $(BRANCH_NAME) | sed -e 's|^release/\(.*\)|\1-rc|g;' | sed -e 's|/|-|g;')
ifeq ($(origin IMAGE_LABEL), undefined)
  IMAGE_LABEL?=latest
else
  IMAGE_LABEL := $(IMAGE_LABEL)-$(BUILD_LABEL)
endif
IMAGE_BASENAME=$(shell echo $(IMAGE_NAME) | sed -e 's|.*/||g;')
CONTAINER_NAME=$(IMAGE_BASENAME)-$(IMAGE_LABEL)-test.$(NETWORK)
ALIAS_NAME=$(IMAGE_BASENAME).$(NETWORK)
HOSTNAME=$(IMAGE_BASENAME)
NETWORK?=lamp
IMAGE_TARBALL_DIR=tmp/$(shell dirname $(IMAGE_NAME))
IMAGE_TARBALL=tmp/$(IMAGE_NAME)-$(IMAGE_LABEL).tar

# we'll need this if we want to update the base image
BASE_IMAGE=$(shell grep 'FROM' Dockerfile | cut -d' ' -f2)

WORKSPACE_DIR=$(shell pwd -L)/../../../
IMAGES_DIR=$(shell pwd -L)/../../images

BUILD_OPTIONS=--rm=true -t $(IMAGE_NAME):$(IMAGE_LABEL) .
RUN_OPTIONS=--name=$(CONTAINER_NAME) --hostname=$(HOSTNAME) --net=$(NETWORK) --net-alias=$(ALIAS_NAME) -v $(WORKSPACE_DIR):/vagrant -v $(WORKSPACE_DIR):/workspace $(IMAGE_NAME):$(IMAGE_LABEL)

.PHONY: bash build ip publish rebuild remove run stop

all: baseimage bash build ip pull rebuild remove run squash stop run

baseimage:
ifeq ($(UPDATE_BASE_IMAGE), always)
	@echo
	@echo "Pulling latest base image $(BASE_IMAGE)"
	@echo "=-=-=-=-=-=-=-=-=-=-="
	@echo
	docker pull $(BASE_IMAGE)
else
	@echo "Using local copy of any base image"
endif

bash: remove run
	@echo
	@echo "Running test container $(CONTAINER_NAME)"
	@echo "=-=-=-=-=-=-=-=-=-=-="
	@echo
	docker exec -t -i $(CONTAINER_NAME) /bin/bash

build: remove
	@echo
	@echo "Building image $(IMAGE_NAME):$(IMAGE_LABEL)"
	@echo "=-=-=-=-=-=-=-=-=-=-="
	@echo
	docker build $(BUILD_OPTIONS)

ip:
	@docker inspect -f "{{ .NetworkSettings.Networks.$(NETWORK).IPAddress }}" $(CONTAINER_NAME)

pull:
	@echo
	@echo "Pulling latest base image $(BASE_IMAGE)"
	@echo "=-=-=-=-=-=-=-=-=-=-="
	@echo
	docker pull $(BASE_IMAGE)

publish:
	@echo
	@echo "Publishing image $(IMAGE_NAME):$(IMAGE_LABEL)"
	@echo "=-=-=-=-=-=-=-=-=-=-="
	@echo
	docker push $(IMAGE_NAME):$(IMAGE_LABEL)

rebuild:
	@echo
	@echo "Building image $(IMAGE_NAME):$(IMAGE_LABEL)"
	@echo "=-=-=-=-=-=-=-=-=-=-="
	@echo
	-docker rmi -f $(IMAGE_NAME):$(IMAGE_LABEL)
	docker build --no-cache $(BUILD_OPTIONS)

remove: stop
	@echo
	@echo "Removing test container $(CONTAINER_NAME)"
	@echo "=-=-=-=-=-=-=-=-=-=-="
	@echo
	@echo "It is safe to ignore any errors, if the test container has never been started"
	@echo
	-@docker rm -f $(CONTAINER_NAME)

run: remove
	@echo
	@echo "Running test container $(CONTAINER_NAME)"
	@echo "=-=-=-=-=-=-=-=-=-=-="
	@echo
	docker run -d $(RUN_OPTIONS)
	@echo
	@echo "Test container is now running on IP address:"
	@make ip

squash:
	@echo
	@echo "Flattening image $(IMAGE_NAME):$(IMAGE_LABEL)"
	@echo "=-=-=-=-=-=-=-=-=-=-="
	@echo
	mkdir -p $(IMAGE_TARBALL_DIR)
	docker image save $(IMAGE_NAME):$(IMAGE_LABEL) > $(IMAGE_TARBALL)
	-docker rmi -f $(IMAGE_NAME):$(IMAGE_LABEL)
	docker image import $(IMAGE_TARBALL) $(IMAGE_NAME):$(IMAGE_LABEL)
	rm $(IMAGE_TARBALL)

stop:
	@echo
	@echo "Stopping test container $(CONTAINER_NAME)"
	@echo "=-=-=-=-=-=-=-=-=-=-="
	@echo
	@echo "It is safe to ignore any errors, if the test container is not running"
	@echo
	-@docker stop $(CONTAINER_NAME)
